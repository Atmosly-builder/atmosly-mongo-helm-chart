global:
  imageRegistry: ""

  imagePullSecrets: []
  storageClass: "gp2"
  namespaceOverride: ""

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "Addons-Services"
            operator: In
            values:
            - "true"

nameOverride: ""

fullnameOverride: ""

namespaceOverride: ""

kubeVersion: ""

clusterDomain: cluster.local

extraDeploy: []

commonLabels: {}

commonAnnotations: {}

topologyKey: ""

serviceBindings:
  enabled: false

enableServiceLinks: true

diagnosticMode:

  enabled: false

  command:
    - sleep

  args:
    - infinity

image:
  registry: docker.io
  repository: bitnami/mongodb
  tag: 7.0.5-debian-11-r6
  digest: ""

  pullPolicy: IfNotPresent

  pullSecrets: []

  debug: false

schedulerName: ""

architecture: replicaset

useStatefulSet: false

auth:

  enabled: true

  rootUser: root

  rootPassword: root

  usernames: []
  passwords: []
  databases: []

  username: ""
  password: ""
  database: ""

  replicaSetKey: navneet
  existingSecret: ""
tls:
  enabled: false
  mTLS:
    enabled: true

  autoGenerated: true

  existingSecret: ""

  caCert: ""
  caKey: ""

  pemChainIncluded: false
  standalone:

    existingSecret: ""
  replicaset:

    existingSecrets: []
  hidden:

    existingSecrets: []
  arbiter:

    existingSecret: ""

  image:
    registry: docker.io
    repository: bitnami/nginx
    tag: 1.25.3-debian-11-r7
    digest: ""
    pullPolicy: IfNotPresent
  
    pullSecrets: []

  extraDnsNames: []

  mode: requireTLS

  resourcesPreset: "none"

  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 100m

  securityContext: {}

automountServiceAccountToken: false

hostAliases: []

replicaSetName: rs0

replicaSetHostnames: true

enableIPv6: false

directoryPerDB: false

systemLogVerbosity: 0
disableSystemLog: false

disableJavascript: false

enableJournal: true

configuration: ""

replicaSetConfigurationSettings:
  enabled: false
  configuration: {}

existingConfigmap: ""

initdbScripts: {}

initdbScriptsConfigMap: ""

command: []
args: []

extraFlags: []

extraEnvVars: []

extraEnvVarsCM: ""

extraEnvVarsSecret: ""

annotations: {}

labels: {}

replicaCount: 1

updateStrategy:
  type: RollingUpdate

podManagementPolicy: OrderedReady

podAffinityPreset: ""

podAntiAffinityPreset: soft

nodeAffinityPreset:

  type: ""

  key: ""

  values: []

affinity: 
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: "Addons-Services"
          operator: In
          values:
          - "true"

nodeSelector: {}

tolerations: []

topologySpreadConstraints: []

lifecycleHooks: {}

terminationGracePeriodSeconds: ""

podLabels: {}

podAnnotations: {}

priorityClassName: ""

runtimeClassName: ""

podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  supplementalGroups: []
  fsGroup: 1001

  sysctls: []

containerSecurityContext:
  enabled: true
  seLinuxOptions: null
  runAsUser: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

resourcesPreset: "none"

resources:
  requests:
    memory: 300Mi
    cpu: 200m
  limits:
    memory: 700Mi
    cpu: 500m

containerPorts:
  mongodb: 27017

livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 10
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

startupProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 20
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 30

customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
initContainers: []
sidecars: []
extraVolumeMounts: []
extraVolumes: []

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

service:
  nameOverride: ""
  type: ClusterIP
  portName: mongodb
  ports:
    mongodb: 27017
  nodePorts:
    mongodb: ""

  clusterIP: ""

  externalIPs: []

  loadBalancerIP: ""
  loadBalancerClass: ""
  loadBalancerSourceRanges: []
  allocateLoadBalancerNodePorts: true
  extraPorts: []
  annotations: {}
  externalTrafficPolicy: Local
  sessionAffinity: None
  sessionAffinityConfig: {}
  headless:
    annotations: {}
externalAccess:
  enabled: false
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.29.1-debian-11-r3
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    resourcesPreset: "none"
    resources: {}
  externalMaster:
    enabled: false
    host: ""
    port: 27017
  service:
    type: LoadBalancer
    portName: "mongodb"
    ports:
      mongodb: 27017
    loadBalancerIPs: []
    loadBalancerClass: ""
    loadBalancerSourceRanges: []
    allocateLoadBalancerNodePorts: true
    externalTrafficPolicy: Local
    nodePorts: []
    domain: ""
    extraPorts: []
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  hidden:
    enabled: false
    service:
      type: LoadBalancer
      portName: "mongodb"
      ports:
        mongodb: 27017
      loadBalancerIPs: []
      loadBalancerClass: ""
      loadBalancerSourceRanges: []
      allocateLoadBalancerNodePorts: true
      externalTrafficPolicy: Local
      nodePorts: []
      domain: ""
      extraPorts: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}

networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

persistence:
  enabled: true
  name: "datadir"
  medium: ""
  existingClaim: ""
  persistentVolumeReclaimPolicy: Delete
  resourcePolicy: ""
  storageClass: "gp2"
  accessModes:
    - ReadWriteOnce
  size: 8Gi

  annotations: {}
  mountPath: /bitnami/mongodb
  subPath: ""

  volumeClaimTemplates:
    selector: {}
    requests: {}
    dataSource: {}
persistentVolumeClaimRetentionPolicy:
  enabled: true
  whenScaled: Delete
  whenDeleted: Delete
backup:
  enabled: false
  cronjob:
    schedule: "@daily"
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    startingDeadlineSeconds: ""
    ttlSecondsAfterFinished: ""
    restartPolicy: OnFailure
    containerSecurityContext:
      enabled: true
      seLinuxOptions: null
      runAsUser: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    command: []
    labels: {}
    annotations: {}
    storage:
      existingClaim: ""
      resourcePolicy: ""
      storageClass: "gp2"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      annotations: {}
      mountPath: /backup/mongodb
      subPath: ""
      volumeClaimTemplates:
        selector: {}
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false
rbac:
  create: false
  rules: []
podSecurityPolicy:
  create: false
  allowPrivilegeEscalation: false
  privileged: false
  spec: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r96
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "none"
  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 100m
  securityContext:
    seLinuxOptions: null
    runAsUser: 0
arbiter:
  enabled: true
  replicaCount: 1
  automountServiceAccountToken: false
  hostAliases: []
  configuration: ""
  existingConfigmap: ""
  command: []
  args: []
  extraFlags: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  annotations: {}
  labels: {}
  topologySpreadConstraints: []
  lifecycleHooks: {}
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  schedulerName: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: 
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "Addons-Services"
            operator: In
            values:
            - "true"
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  runtimeClassName: ""
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    supplementalGroups: []
    fsGroup: 1001
    sysctls: []
  containerSecurityContext:
    enabled: true
    seLinuxOptions: null
    runAsUser: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "none"
  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 400Mi
      cpu: 300m
  containerPorts:
    mongodb: 27017
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  service:
    nameOverride: ""
    ports:
      mongodb: 27017
    extraPorts: []
    annotations: {}
    headless:
      annotations: {}
hidden:
  enabled: false
  automountServiceAccountToken: false
  hostAliases: []
  configuration: ""
  existingConfigmap: ""
  command: []
  args: []
  extraFlags: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  annotations: {}
  labels: {}
  topologySpreadConstraints: []
  lifecycleHooks: {}
  replicaCount: 1
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  schedulerName: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: 
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "Addons-Services"
            operator: In
            values:
            - "true"
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  runtimeClassName: ""
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    supplementalGroups: []
    fsGroup: 1001
    sysctls: []
  containerSecurityContext:
    enabled: true
    seLinuxOptions: null
    runAsUser: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  resourcesPreset: "none"
  resources: {}
  containerPorts:
    mongodb: 27017
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  persistence:
    enabled: true
    medium: ""
    storageClass: "gp2"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    mountPath: /bitnami/mongodb
    subPath: ""
    volumeClaimTemplates:
      selector: {}
      requests: {}
      dataSource: {}
  service:
    portName: "mongodb"
    ports:
      mongodb: 27017
    extraPorts: []
    annotations: {}
    headless:
      annotations: {}
metrics:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/mongodb-exporter
    tag: 0.40.0-debian-11-r6
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  username: ""
  password: ""
  compatibleMode: true
  collector:
    all: false
    diagnosticdata: true
    replicasetstatus: true
    dbstats: false
    topmetrics: false
    indexstats: false
    collstats: false
    collstatsColls: []
    indexstatsColls: []
    collstatsLimit: 0
  extraFlags: ""
  command: []
  args: []
  resourcesPreset: "none"
  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 100m
  containerPort: 9216
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
      prometheus.io/path: "/metrics"
    type: ClusterIP
    ports:
      metrics: 9216
    extraPorts: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraVolumeMounts: []
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
    labels: {}
    selector: {}
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []

backup_job:
  enabled: true
  
  bucket_uri: "s3://navneet-workflow/mongo/"
  aws_default_region: "ap-south-1"
  cron_for_full_backup: "*/3 * * * *"

  annotations:
    aws: arn:aws:iam::767398031518:role/test-mysq-backup-restore

  bucket_provider_type: s3

  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 100m

restore_job:
  enabled: true

  bucket_uri: "s3://navneet-workflow/mongo/mongodumpfull_20240221_080901.gz"
  file_name: "mongodumpfull_20240221_080901.gz"
  aws_default_region: ap-south-1

  annotations:
    aws: arn:aws:iam::767398031518:role/test-mysq-backup-restore

  bucket_provider_type: s3

  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 100m
